var app = require('../server.js');
var debug = require('debug')('passcontainapp:server');
var http = require('http');
var server = app.listen(3001);
var io = require('socket.io')(server,{}),connections=[],nodemailer = require('nodemailer'),
transporter = nodemailer.createTransport({service: 'gmail',auth: {user: 'gravfieldgame@gmail.com',pass: '!easy2Remember'}}),
browserClicks = {};
/**
 * Get port from environment and store in Express.
 */
// rest of page is mostly socket listeners and callbacks
app.emailMe = function(options,socket){
	transporter.sendMail(options, (error, info) => {
     if (error) {
       socket.emit('emailSent');
     } else{
       socket.emit('emailSent',{res:'Message was sent!'});
     }
 });
}
io.sockets.on('connection', function (socket) {
    connections.push(socket);
    socket.on('sendEmail',function(data){
      app.emailMe(data,socket);
    });
		socket.on('clicked',function(data){
			if(!browserClicks[data.id]){
				browserClicks[data.id] = {};
				browserClicks[data.id].last = Date.now();
				browserClicks[data.id].clickCount = 1;
				return;
			} else{
				var lastTime = Date.now()-browserClicks[data.id].last;
				browserClicks[data.id].clickCount+=1;
				if(lastTime>=4000){
					// browserClicks[data.id].onAlert = false;
					browserClicks[data.id].clickCount = 0;
					browserClicks[data.id].last = Date.now();
					console.log(lastTime);
					return;
				} else if(browserClicks[data.id].clickCount>4){
					// browserClicks[data.id].onAlert = true;
					socket.emit('alertClick');
					return;
				} else if(browserClicks[data.id].clickCount>10){
					socket.emit('tooMany');
				}
			}
		});
    socket.on('disconnect', function (){
      connections.splice(connections.indexOf(socket),1);
    });
});

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
